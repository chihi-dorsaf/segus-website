version: '3.8'

services:
  # Base de données PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: segus_db
    environment:
      POSTGRES_DB: segus_engineering
      POSTGRES_USER: segus_user
      POSTGRES_PASSWORD: segus_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./segus_engineering_Backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - segus_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U segus_user -d segus_engineering"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: segus_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - segus_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Django
  backend:
    build:
      context: ./segus_engineering_Backend
      dockerfile: Dockerfile
    container_name: segus_backend
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://segus_user:segus_password_2024@db:5432/segus_engineering
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=django-insecure-dev-key-change-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:4200,http://127.0.0.1:4200
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
    volumes:
      - ./segus_engineering_Backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - segus_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Angular
  frontend:
    build:
      context: ./Segus_Engineering_Frontend
      dockerfile: Dockerfile
    container_name: segus_frontend
    environment:
      - NODE_ENV=development
    volumes:
      - ./Segus_Engineering_Frontend:/app
      - /app/node_modules
    ports:
      - "4200:4200"
    depends_on:
      - backend
    networks:
      - segus_network
    restart: unless-stopped

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: segus_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - segus_network
    restart: unless-stopped

  # Adminer pour la gestion de base de données
  adminer:
    image: adminer:latest
    container_name: segus_adminer
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - segus_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  db_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local
  frontend_logs:
    driver: local

networks:
  segus_network:
    driver: bridge
